openapi: 3.0.0
info:
  description: 'Access token should be sent along with every request to SITE_NAME API in authorization header: `Authorization: Bearer <Token>` <br> This token can either be acquired via `auth/login` endpoint or from account settings page on [SITE_NAME website](SITE_URL/account/settings).'
  version: '1.0.0'
  title: SITE_NAME API
security:
  - accessToken: []
tags:
  - name: Tickets
  - name: Replies
  - name: Users
  - name: Search
  - name: Tags
  - name: Articles
  - name: Categories
  - name: Reports
  - name: Canned Replies
  - name: Envato
  - name: Auth
    description: Authenticate requests to the API
paths:
  /tickets:
    get:
      tags:
        - Tickets
      summary: List all tickets
      operationId: getAllTickets
      parameters:
        - name: perPage
          in: query
          description: How many tickets to show per page
          schema:
            type: integer
            default: 20
        - name: page
          in: query
          description: Which page to show
          schema:
            type: integer
            default: 1
        - name: tagId
          in: query
          description: List tickets for specified tag or status
          example: pending
        - name: assigned_to
          in: query
          description: List tickets assigned to specified agent
          schema:
            type: integer
        - name: userId
          in: query
          description: List tickets created by specified user
          schema:
            type: integer
        - name: query
          in: query
          description: List tickets matching specified search query
          schema:
            type: string
        - name: order
          in: query
          description: What to sorty tickets by
          schema:
            type: string
      responses:
        '200':
          description: Response body contains a paginated list of tickets in JSON format.
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: success
                  pagination:
                    allOf:
                      - $ref: '#/components/schemas/Pagination'
                      - type: object
                        properties:
                          data:
                            type: array
                            items:
                              $ref: '#/components/schemas/Ticket'
        '401':
          $ref: '#/components/schemas/401-Response'
        '403':
          $ref: '#/components/schemas/403-Response'
    post:
      tags:
        - Tickets
      summary: Create a new ticket
      operationId: createTicket
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CrupdateTicketPayload'
      responses:
        '200':
          description: On success, the response body contains the created ticket object in JSON format
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: success
                  ticket:
                    $ref: '#/components/schemas/Ticket'
        '401':
          $ref: '#/components/schemas/401-Response'
        '403':
          $ref: '#/components/schemas/403-Response'
        '422':
          $ref: '#/components/schemas/422-Response'
  /tickets/{id}:
    parameters:
      - name: id
        in: path
        description: ID of the ticket
        example: 1
    get:
      tags:
        - Tickets
      summary: Get full ticket details
      operationId: getTicket
      responses:
        '200':
          description: Response body contains ticket data in JSON format.
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: success
                  ticket:
                    $ref: '#/components/schemas/Ticket'
        401:
          $ref: '#/components/schemas/401-Response'
        403:
          $ref: '#/components/schemas/403-Response'
        404:
          $ref: '#/components/schemas/404-Response'
    put:
      tags:
        - Tickets
      summary: update existing ticket
      operationId: updateTicket
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CrupdateTicketPayload'
      responses:
        '200':
          description: On success, the response body contains the updated ticket object in JSON format
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: success
                  ticket:
                    $ref: '#/components/schemas/Ticket'
        '401':
          $ref: '#/components/schemas/401-Response'
        '403':
          $ref: '#/components/schemas/403-Response'
        '422':
          $ref: '#/components/schemas/422-Response'
    delete:
      tags:
        - Tickets
      summary: Delete a ticket
      operationId: deleteTicket
      responses:
        '200':
          description: Ticket has been deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: success
        '401':
          $ref: '#/components/schemas/401-Response'
        '403':
          $ref: '#/components/schemas/403-Response'
        '404':
          $ref: '#/components/schemas/404-Response'
  /tickets/{id}/replies:
    parameters:
      - name: id
        in: path
        description: ID of the ticket
        example: 1
    get:
      tags:
        - Tickets
      summary: List all replies for ticket
      operationId: getTicketReplies
      parameters:
        - name: perPage
          in: query
          description: How many replies to show per page
          schema:
            type: integer
            default: 20
        - name: page
          in: query
          description: Which page to show
          schema:
            type: integer
            default: 1
      responses:
        '200':
          description: Response body contains a paginated list of ticket replies in JSON format.
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: success
                  pagination:
                    allOf:
                      - $ref: '#/components/schemas/Pagination'
                      - type: object
                        properties:
                          data:
                            type: array
                            items:
                              $ref: '#/components/schemas/Reply'
        '401':
          $ref: '#/components/schemas/401-Response'
        '403':
          $ref: '#/components/schemas/403-Response'
  /tickets/{id}/{replyType}:
    parameters:
      - name: id
        in: path
        description: ID of the ticket
        example: 1
      - name: replyType
        in: path
        description: Type of reply. Either replies, drafts or notes.
        example: replies
    post:
      tags:
        - Replies
      summary: Create a new reply
      operationId: createReply
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CrupdateReplyPayload'
      responses:
        '200':
          description: On success, the response body contains the created reply object in JSON format
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: success
                  reply:
                    $ref: '#/components/schemas/Reply'
        '401':
          $ref: '#/components/schemas/401-Response'
        '403':
          $ref: '#/components/schemas/403-Response'
        '422':
          $ref: '#/components/schemas/422-Response'
  /tickets/{tagId}/next-active-ticket:
    parameters:
      - name: tagId
        in: path
        description: Tag or status ID.
        example: pending
    get:
      tags:
        - Tickets
      summary: Fetch next active ticket in specified category
      operationId: getNextActiveTicket
      responses:
        '200':
          description: Response body contains ticket data in JSON format.
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: success
                  ticket:
                    $ref: '#/components/schemas/Ticket'

        401:
          $ref: '#/components/schemas/401-Response'
        403:
          $ref: '#/components/schemas/403-Response'
        404:
          $ref: '#/components/schemas/404-Response'
  /tickets/merge/{ticketOne}/{ticketTwo}:
    parameters:
      - name: ticketOne
        in: path
        description: ID of the first ticket
        example: 1
      - name: ticketTwo
        in: path
        description: ID of the second ticket
        example: 2
    post:
      tags:
        - Tickets
      summary: Merge two tickets
      operationId: mergeTickets
      responses:
        '200':
          description: On success, the response body contains the merged ticket object in JSON format
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: success
                  ticket:
                    $ref: '#/components/schemas/Ticket'
        '401':
          $ref: '#/components/schemas/401-Response'
        '403':
          $ref: '#/components/schemas/403-Response'
        '422':
          $ref: '#/components/schemas/422-Response'
  /tickets/assign:
    post:
      tags:
        - Tickets
      summary: Assign tickets to agent
      operationId: assignTicket
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                user_id:
                  type: integer
                  example: 1
                  description: ID of agent ticket should be assigned to
                ticket_ids:
                  type: array
                  example: [1]
                  items:
                    type: integer
      responses:
        '200':
          description: Tickets assigned
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: success
        '401':
          $ref: '#/components/schemas/401-Response'
        '403':
          $ref: '#/components/schemas/403-Response'
        '422':
          $ref: '#/components/schemas/422-Response'
  /tickets/status/change:
    post:
      tags:
        - Tickets
      summary: Change status for multiple tickets
      operationId: ticketStatusChange
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                status:
                  type: string
                  enum:
                    - open
                    - closed
                    - pending
                    - spam
                ids:
                  type: array
                  example: [ 1 ]
                  description: Ticket IDs
                  items:
                    type: integer
      responses:
        '200':
          description: Status changed
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: success
        '401':
          $ref: '#/components/schemas/401-Response'
        '403':
          $ref: '#/components/schemas/403-Response'
        '422':
          $ref: '#/components/schemas/422-Response'
  /tickets/tags/add:
    post:
      tags:
        - Tickets
      summary: Add tag to multiple tickets
      operationId: ticketTagAdd
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                tag:
                  type: string
                  example: example
                  description: Name of existing or new tag
                ids:
                  type: array
                  example: [ 1 ]
                  description: Ticket IDs
                  items:
                    type: integer
      responses:
        '200':
          description: Tag added
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: success
        '401':
          $ref: '#/components/schemas/401-Response'
        '403':
          $ref: '#/components/schemas/403-Response'
        '422':
          $ref: '#/components/schemas/422-Response'
  /tickets/tags/remove:
    post:
      tags:
        - Tickets
      summary: Remove tag from multiple tickets
      operationId: ticketTagRemove
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                tag:
                  type: integer
                  example: 1
                  description: Id of the tag to remove
                ids:
                  type: array
                  example: [ 1 ]
                  description: Ticket IDs
                  items:
                    type: integer
      responses:
        '200':
          description: Tag added
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: success
        '401':
          $ref: '#/components/schemas/401-Response'
        '403':
          $ref: '#/components/schemas/403-Response'
        '422':
          $ref: '#/components/schemas/422-Response'

  /replies/{id}:
    parameters:
      - name: id
        in: path
        description: ID of the reply
        example: 1
    get:
      tags:
        - Replies
      summary: Get full reply details
      operationId: getReply
      responses:
        '200':
          description: Response body contains reply data in JSON format.
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: success
                  ticket:
                    $ref: '#/components/schemas/Reply'
        401:
          $ref: '#/components/schemas/401-Response'
        403:
          $ref: '#/components/schemas/403-Response'
        404:
          $ref: '#/components/schemas/404-Response'
    put:
      tags:
        - Replies
      summary: Update a reply
      operationId: updateReply
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CrupdateReplyPayload'
      responses:
        '200':
          description: On success, the response body contains the updated reply object in JSON format
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: success
                  reply:
                    $ref: '#/components/schemas/Reply'
        '401':
          $ref: '#/components/schemas/401-Response'
        '403':
          $ref: '#/components/schemas/403-Response'
        '422':
          $ref: '#/components/schemas/422-Response'
    delete:
      tags:
        - Replies
      summary: Delete a reply
      operationId: deleteReply
      responses:
        '200':
          description: Reply has been deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: success
        '401':
          $ref: '#/components/schemas/401-Response'
        '403':
          $ref: '#/components/schemas/403-Response'
        '404':
          $ref: '#/components/schemas/404-Response'
  /replies/{id}/original:
    parameters:
      - name: id
        in: path
        description: ID of the reply
        example: 1
    get:
      tags:
        - Replies
      summary: Get original email for the reply
      operationId: getReply
      responses:
        '200':
          description: Response body contains original email this reply was created from.
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: success
                  email:
                    $ref: '#/components/schemas/OriginalEmail'
        401:
          $ref: '#/components/schemas/401-Response'
        403:
          $ref: '#/components/schemas/403-Response'
        404:
          $ref: '#/components/schemas/404-Response'

  /search/all:
    parameters:
      - name: query
        in: query
        description: Search query
        schema:
          type: string
      - name: perPage
        in: query
        description: How many search results to return
        schema:
          type: integer
          default: 20
    get:
      tags:
        - Search
      summary: Search for tickets, users and help center articles
      operationId: searchEverything
      responses:
        '200':
          description: Response body contains a list of results matching search query in JSON format.
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: success
                  query:
                    type: string
                    example: example
                  results:
                    type: object
                    properties:
                      tickets:
                        allOf:
                          - $ref: '#/components/schemas/Pagination'
                          - type: object
                            properties:
                              data:
                                type: array
                                items:
                                  $ref: '#/components/schemas/Ticket'
                      users:
                        allOf:
                          - $ref: '#/components/schemas/Pagination'
                          - type: object
                            properties:
                              data:
                                type: array
                                items:
                                  $ref: '#/components/schemas/User'
                      articles:
                        allOf:
                          - $ref: '#/components/schemas/Pagination'
                          - type: object
                            properties:
                              data:
                                type: array
                                items:
                                  $ref: '#/components/schemas/Article'

        '401':
          $ref: '#/components/schemas/401-Response'
        '403':
          $ref: '#/components/schemas/403-Response'
  /search/tickets:
    parameters:
      - name: query
        in: query
        description: Search query
        schema:
          type: string
      - name: perPage
        in: query
        description: How many search results to return
        schema:
          type: integer
          default: 20
      - name: page
        in: query
        description: Which page to return
        schema:
          type: integer
          default: 1
    get:
      tags:
        - Search
      summary: Search for tickets
      operationId: searchTickets
      responses:
        '200':
          description: Response body contains a list of ticket results matching search query in JSON format.
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: success
                  query:
                    type: string
                    example: example
                  pagination:
                    allOf:
                      - $ref: '#/components/schemas/Pagination'
                      - type: object
                        properties:
                          data:
                            type: array
                            items:
                              $ref: '#/components/schemas/Ticket'
        '401':
          $ref: '#/components/schemas/401-Response'
        '403':
          $ref: '#/components/schemas/403-Response'
  /search/users:
    parameters:
      - name: query
        in: query
        description: Search query
        schema:
          type: string
      - name: perPage
        in: query
        description: How many search results to return
        schema:
          type: integer
          default: 20
      - name: page
        in: query
        description: Which page to return
        schema:
          type: integer
          default: 1
    get:
      tags:
        - Search
      summary: Search for users
      operationId: searchUsers
      responses:
        '200':
          description: Response body contains a list of user results matching search query in JSON format.
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: success
                  query:
                    type: string
                    example: example
                  pagination:
                    allOf:
                      - $ref: '#/components/schemas/Pagination'
                      - type: object
                        properties:
                          data:
                            type: array
                            items:
                              $ref: '#/components/schemas/User'
        '401':
          $ref: '#/components/schemas/401-Response'
        '403':
          $ref: '#/components/schemas/403-Response'
  /search/articles:
    parameters:
      - name: query
        in: query
        description: Search query
        schema:
          type: string
      - name: perPage
        in: query
        description: How many search results to return
        schema:
          type: integer
          default: 20
      - name: page
        in: query
        description: Which page to return
        schema:
          type: integer
          default: 1
    get:
      tags:
        - Search
      summary: Search for articles
      operationId: searchArticles
      responses:
        '200':
          description: Response body contains a list of article results matching search query in JSON format.
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: success
                  query:
                    type: string
                    example: example
                  pagination:
                    allOf:
                      - $ref: '#/components/schemas/Pagination'
                      - type: object
                        properties:
                          data:
                            type: array
                            items:
                              $ref: '#/components/schemas/Article'
        '401':
          $ref: '#/components/schemas/401-Response'
        '403':
          $ref: '#/components/schemas/403-Response'

  /users/{id}:
    parameters:
      - name: id
        in: path
        description: ID of the user
        example: 1
    get:
      tags:
        - Users
      summary: Get a full user profile.
      operationId: getUser
      responses:
        '200':
          description: Response body contains a user object in JSON format.
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: success
                  user:
                    $ref: '#/components/schemas/User'
        '401':
          $ref: '#/components/schemas/401-Response'
        '403':
          $ref: '#/components/schemas/403-Response'
        '404':
          $ref: '#/components/schemas/404-Response'
  /users/{id}/tags/sync:
    parameters:
      - name: id
        in: path
        description: ID of the user
        example: 1
    post:
      tags:
        - Users
      summary: Sync user tags
      operationId: syncUserTags
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                tags:
                  description: Array of tag names
                  type: array
                  items:
                    type: string
      responses:
        '200':
          description: Tags synced
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: success
        '401':
          $ref: '#/components/schemas/401-Response'
        '403':
          $ref: '#/components/schemas/403-Response'
        '404':
          $ref: '#/components/schemas/404-Response'
        '422':
          $ref: '#/components/schemas/422-Response'
  /users/{id}/details:
    parameters:
      - name: id
        in: path
        description: ID of the user
        example: 1
    post:
      tags:
        - Users
      summary: Update user details
      operationId: updateUserDetails
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                details:
                  type: string
                  example: Some details about a user
                notes:
                  type: string
                  example: Some notes about a user
      responses:
        '200':
          description: On success, response body contains an updated user object in JSON format
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: success
                  user:
                    $ref: '#/components/schemas/User'
        '401':
          $ref: '#/components/schemas/401-Response'
        '403':
          $ref: '#/components/schemas/403-Response'
        '404':
          $ref: '#/components/schemas/404-Response'
        '422':
          $ref: '#/components/schemas/422-Response'
  /users/{id}/emails/attach:
    parameters:
      - name: id
        in: path
        description: ID of the user
        example: 1
    post:
      tags:
        - Users
      summary: Attach additional email address to user
      operationId: attachEmailToUser
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                emails:
                  type: array
                  items:
                    - type: string
                  example: [some@email.com, other@email.com]
      responses:
        '200':
          description: On success, response body contains an updated user object in JSON format
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: success
                  user:
                    $ref: '#/components/schemas/User'
        '401':
          $ref: '#/components/schemas/401-Response'
        '403':
          $ref: '#/components/schemas/403-Response'
        '404':
          $ref: '#/components/schemas/404-Response'
        '422':
          $ref: '#/components/schemas/422-Response'
  /users/{id}/emails/detach:
    parameters:
      - name: id
        in: path
        description: ID of the user
        example: 1
    post:
      tags:
        - Users
      summary: Detach additional email address from user
      operationId: detachEmailToUser
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                emails:
                  type: array
                  items:
                    - type: string
                  example: [ some@email.com, other@email.com ]
      responses:
        '200':
          description: On success, response body contains an updated user object in JSON format
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: success
                  user:
                    $ref: '#/components/schemas/User'
        '401':
          $ref: '#/components/schemas/401-Response'
        '403':
          $ref: '#/components/schemas/403-Response'
        '404':
          $ref: '#/components/schemas/404-Response'
        '422':
          $ref: '#/components/schemas/422-Response'

  /tags/agent-mailbox:
    get:
      tags:
        - Tags
      summary: List agent mailbox tags
      operationId: getAgentMailboxTags
      responses:
        '200':
          description: Response body contains a list of tags in JSON format.
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: success
                  tags:
                    type: array
                    items:
                      $ref: '#/components/schemas/Tag'

        '401':
          $ref: '#/components/schemas/401-Response'
        '403':
          $ref: '#/components/schemas/403-Response'
  /tags:
    post:
      tags:
        - Tags
      summary: Create a new tag
      operationId: createTag
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CrupdateTagPayload'
      responses:
        '200':
          description: On success, the response body contains the created tag object in JSON format
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: success
                  tag:
                    $ref: '#/components/schemas/Tag'
        '401':
          $ref: '#/components/schemas/401-Response'
        '403':
          $ref: '#/components/schemas/403-Response'
        '422':
          $ref: '#/components/schemas/422-Response'
  /tags/{id}:
    parameters:
      - name: id
        in: path
        description: ID of the tag
        example: 1
    put:
      tags:
        - Tags
      summary: update existing tag
      operationId: updateTag
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CrupdateTagPayload'
      responses:
        '200':
          description: On success, the response body contains the updated tag object in JSON format
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: success
                  tag:
                    $ref: '#/components/schemas/Tag'
        '401':
          $ref: '#/components/schemas/401-Response'
        '403':
          $ref: '#/components/schemas/403-Response'
        '404':
          $ref: '#/components/schemas/404-Response'
        '422':
          $ref: '#/components/schemas/422-Response'
    delete:
      tags:
        - Tags
      summary: Delete a tag
      operationId: deleteTag
      responses:
        '200':
          description: Tag has been deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: success
        '401':
          $ref: '#/components/schemas/401-Response'
        '403':
          $ref: '#/components/schemas/403-Response'
        '404':
          $ref: '#/components/schemas/404-Response'

  /reports/tickets/range:
    get:
      tags:
        - Reports
      summary: Get ticket reports
      operationId: getTicketReport
      parameters:
        - name: from_year
          in: query
          schema:
            type: integer
            example: 2021
        - name: from_month
          in: query
          schema:
            type: integer
            example: 01
        - name: from_day
          in: query
          schema:
            type: integer
            example: 01
        - name: to_year
          in: query
          schema:
            type: integer
            example: 2021
        - name: to_month
          in: query
          schema:
            type: integer
            example: 01
        - name: to_day
          in: query
          schema:
            type: integer
            example: 01
      responses:
        '200':
          description: Response body contains a ticket report in JSON format.
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: success
                  data:
                    type: object
                    properties:
                      newTicktets:
                        type: integer
                        example: 44
                      solvedTickets:
                        type: integer
                        example: 22
                      openTickets:
                        type: integer
                        example: 12
                      avgResponseTime:
                        type: integer
                        example: 12
                      dailyCounts:
                        type: object
                        additionalProperties:
                          type: object
                          properties:
                            label:
                              type: string
                              example: Aug, 24
                            count:
                              type: integer
                              example: 8
                      tags:
                        type: object
                        additionalProperties:
                          type: object
                          properties:
                            name:
                              type: string
                              example: Tag Name
                            count:
                              type: integer
                              example: 8
                            percentage:
                              type: integer
                              example: 50
                      agents:
                        type: array
                        items:
                          type: object
                          properties:
                            replies:
                              type: integer
                              example: 5
                            ticketsSolved:
                              type: integer
                              example: 3
                            id:
                              type: integer
                              example: 1
                            email:
                              type: string
                              example: agent@agent.com
                            avgResponseTime:
                              type: integer
                              example: 17
                      firstResponseTimes:
                        type: object
                        properties:
                          average:
                            type: integer
                            example: 1
                          breakdown:
                            type: object
                            additionalProperties:
                              type: object
                              properties:
                                count:
                                  type: integer
                                  example: 4
                                percentage:
                                  type: integer
                                  example: 40
                      hourlyCounts:
                        type: object
                        properties:
                          max:
                            type: integer
                            example: 2
                          data:
                            type: array
                            items:
                              type: object
                              properties:
                                day:
                                  type: string
                                  example: Mon
                                counts:
                                  type: object
                                  additionalProperties:
                                    type: integer
        '401':
          $ref: '#/components/schemas/401-Response'
        '403':
          $ref: '#/components/schemas/403-Response'
  /reports/help-center:
    get:
      tags:
        - Reports
      summary: Get help center report
      operationId: getHelpCenterReport
      responses:
        '200':
          description: Response body contains help center report in JSON format.
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: success
                  data:
                    type: object
                    properties:
                      failed_searches:
                        type: array
                        items:
                          $ref: '#/components/schemas/SearchReportItem'
                      popular_searches:
                        type: array
                        items:
                          $ref: '#/components/schemas/SearchReportItem'
                      popularArticles:
                        type: array
                        items:
                          $ref: '#/components/schemas/Article'
        '401':
          $ref: '#/components/schemas/401-Response'
        '403':
          $ref: '#/components/schemas/403-Response'
  /reports/user/{userId}/searches:
    parameters:
      - name: id
        in: path
        description: ID of the user
        example: 1
    get:
      tags:
        - Reports
      summary: Get user searches report
      operationId: getUserSearchesReport
      responses:
        '200':
          description: Response body contains user searches report in JSON format.
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: success
                  report:
                    type: array
                    items:
                      $ref: '#/components/schemas/SearchReportItem'

        '401':
          $ref: '#/components/schemas/401-Response'
        '403':
          $ref: '#/components/schemas/403-Response'
  /reports/envato/earnings:
            get:
              tags:
                - Reports
              summary: Get envato earnging report (Only available if envato module is enabled)
              operationId: getEnvatoReport
              parameters:
                - name: year
                  in: query
                  schema:
                    type: integer
                    example: 2021
                - name: month
                  in: query
                  schema:
                    type: integer
                    example: 01
                - name: day
                  in: query
                  schema:
                    type: integer
                    example: 01
                - name: to_day
                  in: query
                  schema:
                    type: integer
                    example: 31
                - name: yearly
                  in: query
                  example: boolean
              responses:
                '200':
                  description: Response body contains an envato earning report in JSON format.
                  content:
                    application/json:
                      schema:
                        type: object
                        properties:
                          status:
                            type: string
                            example: success
                          data:
                            type: object
                            properties:
                              sales:
                                type: array
                                items:
                                  type: object
                                  properties:
                                    date:
                                      type: string
                                      example: '2021-07-12'
                                    day:
                                      type: integer
                                      example: 14
                                    sale_id:
                                      type: integer
                                      example: 456494
                                    order_id:
                                      type: integer
                                      example: 45465
                                    item_id:
                                      type: integer
                                      example: 8979749
                                    amount:
                                      type: integer
                                      example: 47.25
                                    price:
                                      type: integer
                                      example: 33.75
                                    type:
                                      type: string
                                      example: sale
                                    item:
                                      type: string
                                      example: item name
                                    included_support:
                                      type: boolean
                                      example: false
                                    count:
                                      type: integer
                                      example: 1
                              monthly:
                                type: object
                                additionalProperties:
                                  type: object
                                  properties:
                                    amount:
                                      type: integer
                                      example: 537.58
                                    sales:
                                      type: integer
                                      example: 8
                              totals:
                                type: object
                                properties:
                                  sales:
                                    type: integer
                                    example: 156
                                  earnings:
                                    type: integer
                                    example: 494564
                              items:
                                type: object
                                properties:
                                  amount:
                                    type: integer
                                    example: 156
                                  sales:
                                    type: integer
                                    example: 3
                                  name:
                                    type: string
                                    example: item name
                                  envato_id:
                                    type: string
                                    example: 4658498465
                                  percentage:
                                    type: integer
                                    example: 17
                '401':
                  $ref: '#/components/schemas/401-Response'
                '403':
                  $ref: '#/components/schemas/403-Response'

  /canned-replies:
    get:
      tags:
        - Canned Replies
      summary: List all canned replies
      operationId: getAllCannedReplies
      parameters:
        - name: perPage
          in: query
          description: How many replies to show per page
          schema:
            type: integer
            default: 20
        - name: page
          in: query
          description: Which page to show
          schema:
            type: integer
            default: 1
        - name: userId
          in: query
          description: List replies created by specified user
          example: 1
        - name: shared
          in: query
          description: List "shared" canned replies
          example: true
      responses:
        '200':
          description: Response body contains a paginated list of canned replies in JSON format.
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: success
                  pagination:
                    allOf:
                      - $ref: '#/components/schemas/Pagination'
                      - type: object
                        properties:
                          data:
                            type: array
                            items:
                              $ref: '#/components/schemas/CannedReply'
        '401':
          $ref: '#/components/schemas/401-Response'
        '403':
          $ref: '#/components/schemas/403-Response'
    post:
      tags:
        - Canned Replies
      summary: Create a new canned reply
      operationId: createCannedReply
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CrupdateCannedReplyPayload'
      responses:
        '200':
          description: On success, the response body contains the created canned reply object in JSON format
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: success
                  cannedReply:
                    $ref: '#/components/schemas/CannedReply'
        '401':
          $ref: '#/components/schemas/401-Response'
        '403':
          $ref: '#/components/schemas/403-Response'
        '422':
          $ref: '#/components/schemas/422-Response'
  /canned_replies/{id}:
    parameters:
      - name: id
        in: path
        description: ID of the canned reply
        example: 1
    put:
      tags:
        - Canned Replies
      summary: Update existing canned reply
      operationId: updateCannedReply
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CrupdateCannedReplyPayload'
      responses:
        '200':
          description: On success, the response body contains the updated canned reply object in JSON format
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: success
                  ticket:
                    $ref: '#/components/schemas/CannedReply'
        '401':
          $ref: '#/components/schemas/401-Response'
        '403':
          $ref: '#/components/schemas/403-Response'
        '404':
          $ref: '#/components/schemas/403-Response'
        '422':
          $ref: '#/components/schemas/422-Response'
    delete:
      tags:
        - Canned Replies
      summary: Delete a canned reply
      operationId: deleteCannedReply
      responses:
        '200':
          description: Canned reply has been deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: success
        '401':
          $ref: '#/components/schemas/401-Response'
        '403':
          $ref: '#/components/schemas/403-Response'
        '404':
          $ref: '#/components/schemas/404-Response'

  /help-center/categories:
    get:
      tags:
        - Categories
      summary: List all help center categories
      operationId: getAllCategories
      parameters:
        - name: perPage
          in: query
          description: How many categories to show per page
          schema:
            type: integer
            default: 20
        - name: page
          in: query
          description: Which page to show
          schema:
            type: integer
            default: 1
      responses:
        '200':
          description: Response body contains a paginated list of categories in JSON format.
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: success
                  pagination:
                    allOf:
                      - $ref: '#/components/schemas/Pagination'
                      - type: object
                        properties:
                          data:
                            type: array
                            items:
                              $ref: '#/components/schemas/HelpCenterCategory'
        '401':
          $ref: '#/components/schemas/401-Response'
        '403':
          $ref: '#/components/schemas/403-Response'
    post:
      tags:
        - Categories
      summary: Create a new help center category
      operationId: createCategory
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CrupdateCategoryPayload'
      responses:
        '200':
          description: On success, the response body contains the created category object in JSON format
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: success
                  category:
                    $ref: '#/components/schemas/HelpCenterCategory'
        '401':
          $ref: '#/components/schemas/401-Response'
        '403':
          $ref: '#/components/schemas/403-Response'
        '422':
          $ref: '#/components/schemas/422-Response'
  /help-center/categories/{id}:
    parameters:
      - name: id
        in: path
        description: ID of the category
        example: 1
    get:
      tags:
        - Categories
      summary: Get full help center category details
      operationId: getCategory
      responses:
        '200':
          description: Response body contains category data in JSON format.
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: success
                  category:
                    $ref: '#/components/schemas/HelpCenterCategory'
        401:
          $ref: '#/components/schemas/401-Response'
        403:
          $ref: '#/components/schemas/403-Response'
        404:
          $ref: '#/components/schemas/404-Response'
    put:
      tags:
        - Categories
      summary: update existing help center category
      operationId: updateCategory
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CrupdateCategoryPayload'
      responses:
        '200':
          description: On success, the response body contains the updated category object in JSON format
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: success
                  category:
                    $ref: '#/components/schemas/HelpCenterCategory'
        '401':
          $ref: '#/components/schemas/401-Response'
        '403':
          $ref: '#/components/schemas/403-Response'
        '422':
          $ref: '#/components/schemas/422-Response'
    delete:
      tags:
        - Categories
      summary: Delete a help center category
      operationId: deleteCategory
      responses:
        '200':
          description: Category has been deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: success
        '401':
          $ref: '#/components/schemas/401-Response'
        '403':
          $ref: '#/components/schemas/403-Response'
        '404':
          $ref: '#/components/schemas/404-Response'

  /help-center/articles:
    get:
      tags:
        - Articles
      summary: List all help center articles
      operationId: getAllArticles
      parameters:
        - name: perPage
          in: query
          description: How many articles to show per page
          schema:
            type: integer
            default: 20
        - name: page
          in: query
          description: Which page to show
          schema:
            type: integer
            default: 1
        - name: categories
          in: query
          description: Categories for which articles should be listed
          example: 1, 2
          schema:
            type: string
        - name: categories
          in: query
          description: Tags by which articles should be filtered
          example: 1, 2
          schema:
            type: string
        - name: draft
          in: query
          description: Whether draft articles should be included
          schema:
            type: string
            default: false
        - name: order
          in: query
          description: How should articles be sorted
          schema:
            type: string
            default: position|desc
      responses:
        '200':
          description: Response body contains a paginated list of articles in JSON format.
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: success
                  pagination:
                    allOf:
                      - $ref: '#/components/schemas/Pagination'
                      - type: object
                        properties:
                          data:
                            type: array
                            items:
                              $ref: '#/components/schemas/Article'
        '401':
          $ref: '#/components/schemas/401-Response'
        '403':
          $ref: '#/components/schemas/403-Response'
    post:
      tags:
        - Articles
      summary: Create a new help center article
      operationId: createArticle
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CrupdateArticlePayload'
      responses:
        '200':
          description: On success, the response body contains the created article object in JSON format
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: success
                  article:
                    $ref: '#/components/schemas/Article'
        '401':
          $ref: '#/components/schemas/401-Response'
        '403':
          $ref: '#/components/schemas/403-Response'
        '422':
          $ref: '#/components/schemas/422-Response'
  /help-center/articles/{id}:
    parameters:
      - name: id
        in: path
        description: ID of the article
        example: 1
    get:
      tags:
        - Articles
      summary: Get full help center article details
      operationId: getArticle
      responses:
        '200':
          description: Response body contains article data in JSON format.
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: success
                  article:
                    $ref: '#/components/schemas/Article'
        401:
          $ref: '#/components/schemas/401-Response'
        403:
          $ref: '#/components/schemas/403-Response'
        404:
          $ref: '#/components/schemas/404-Response'
    put:
      tags:
        - Articles
      summary: update existing help center article
      operationId: updateArticle
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CrupdateArticlePayload'
      responses:
        '200':
          description: On success, the response body contains the updated article object in JSON format
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: success
                  article:
                    $ref: '#/components/schemas/Article'
        '401':
          $ref: '#/components/schemas/401-Response'
        '403':
          $ref: '#/components/schemas/403-Response'
        '422':
          $ref: '#/components/schemas/422-Response'
    delete:
      tags:
        - Articles
      summary: Delete a help center article
      operationId: deleteArticle
      responses:
        '200':
          description: Article has been deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: success
        '401':
          $ref: '#/components/schemas/401-Response'
        '403':
          $ref: '#/components/schemas/403-Response'
        '404':
          $ref: '#/components/schemas/404-Response'

  /envato/validate-purchase-code:
    post:
      tags:
        - Envato
      summary: Validate specified envato purchase code
      operationId: validatePurchaseCode
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                purchase_code:
                  type: string
                  required: true
      responses:
        '200':
          description: On success, the response body contains purchse code object in JSON format
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: success
                  code:
                    $ref: '#/components/schemas/EnvatoPurchaseCode'
        '401':
          $ref: '#/components/schemas/401-Response'
        '403':
          $ref: '#/components/schemas/403-Response'
        '422':
          $ref: '#/components/schemas/422-Response'

  /auth/register:
    post:
      security: []
      tags:
        - Auth
      summary: Register for a new account
      operationId: register
      responses:
        '200':
          description: User registered
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: success
                  user:
                    $ref: '#/components/schemas/User'
        '401':
          $ref: '#/components/schemas/401-Response'
        '403':
          $ref: '#/components/schemas/403-Response'
        '422':
          description: Invalid data specified
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/422-Response'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  example: 'example@gmail.com'
                password:
                  type: string
                  example: password
                token_name:
                  type: string
                  example: 'iphone 12'
  /auth/login:
    post:
      security: []
      tags:
        - Auth
      summary: Get access token
      description: 'Logs in specified user and returns user object along with access token. <br><br> Access Token is a string that enables SITE_NAME to verify that a request belongs to an authorized session. This token should be sent along with every request to SITE_NAME API in a authorization header: `Authorization: Bearer <Token>`.'
      operationId: login
      responses:
        '200':
          description: Operation successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: success
                  user:
                    $ref: '#/components/schemas/User'
        '401':
          $ref: '#/components/schemas/401-Response'
        '403':
          $ref: '#/components/schemas/403-Response'
        '422':
          description: Invalid data specified
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/422-Response'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  example: 'example@gmail.com'
                password:
                  type: string
                  example: 'password'
                device_name:
                  type: string
                  example: 'iphone 12'

components:
  schemas:
    Pagination:
      type: object
      properties:
        current_page:
          type: integer
          format: int64
          example: 1
        from:
          type: integer
          format: int64
          example: 1
        to:
          type: integer
          format: int64
          example: 100
        per_page:
          type: integer
          format: int64
          example: 25
        last_page:
          type: integer
          format: int64
          example: 156
        total:
          type: integer
          format: int64
          example: 264

    Ticket:
      properties:
        id:
          type: integer
          format: int64
          example: 1
        subject:
          type: string
          example: Need Help
        user_id:
          type: integer
          example: 1
          description: Requester ID
        closed_by:
          type: integer
          example: 1
          nullable: true
          description: ID of agent ticket was closed by
        assigned_to:
          type: integer
          example: 1
          nullable: true
          description: ID of agent ticket is assigned to
        created_at:
          type: string
          example: '2021-07-12T01:28:52.000000Z'
          description: Date ticket was created
        updated_at:
          type: string
          example: '2021-07-12T01:28:52.000000Z'
          description: Date ticket was last updated
        closed_at:
          type: string
          example: '2021-07-12T01:28:52.000000Z'
          description: Date ticket was closed
        revceived_at_email:
          type: string
          nullable: true
          example: support@example.com
          description: If ticket was created from email, at what address email arrived at. Usually matches "Delivered-To" header.
        email_id:
          type: string
          nullable: true
          example: lxospskfkf-flfkalf-akfkahayq
          description: If ticket was created from email, a globally unique ID for the email. Usually matches "Message-Id" header.
        status:
          type: string
          example: pending
        replies_count:
          type: integer
          example: 15
        user:
          $ref: '#/components/schemas/User'
        tags:
          type: array
          items:
            $ref: '#/components/schemas/Tag'
        latest_reply:
          $ref: '#/components/schemas/Reply'
        assigne:
          $ref: '#/components/schemas/User'
    CrupdateTicketPayload:
      type: object
      properties:
        subject:
          type: string
          example: Need Help
        user_id:
          type: integer
          example: 1
          description: Requester ID
        category:
          type: integer
          example: 1
          description: To what category ticket should be assigned
        body:
          type: string
          example: I need help with something
          description: Body for the ticket
        uploads:
          type: array
          items:
            type: integer
          example: [1]
          description: ID of attachments (uploaded files) for the ticket
        tags:
          type: array
          items:
            type: integer
          example: [1]
          description: ID of tags to attach to the ticket
        created_by_agent:
          type: boolean
          example: true
          default: false
          description: Whether ticket should is created by agent or customer

    Reply:
      properties:
        id:
          type: integer
          format: int64
          example: 1
        body:
          type: string
          example: I need help with some issue
        user_id:
          type: integer
          example: 1
          description: Requester ID
        ticket_id:
          type: integer
          example: 1
        type:
          type: string
          description: Type of reply
          enum:
            - replies
            - notes
            - drafts
        created_at:
          type: string
          example: '2021-07-12T01:28:52.000000Z'
          description: Date reply was created
        updated_at:
          type: string
          example: '2021-07-12T01:28:52.000000Z'
          description: Date reply was last updated
        uploads:
          type: array
          items:
            $ref: '#/components/schemas/FileEntry'
    CrupdateReplyPayload:
      properties:
        body:
          type: string
          example: I need help with some issue
        uploads:
          type: array
          items:
            type: integer
          example: [ 1 ]
          description: ID of attachments (uploaded files) for the reply
        status:
          type: string
          example: pending
          description: Status to apply to the ticket


    OriginalEmail:
      properties:
        headers:
          type: object
          description: Object with email header name as key
          additionalProperties:
            type: string
        body:
          type: object
          properties:
            plain:
              type: string
            html:
              type: string

    FileEntry:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
          example: image.png
        file_name:
          type: string
          example: j6oWHDG1z613UqFHLZpE1Yrqngw0N8XLuGNLNWJV
          description: actual file name for this entry on disk
        file_size:
          type: integer
          format: int64
          example: 111863
          description: In bytes
        parent_id:
          type: integer
          format: int64
          example: 1
          description: Parent folder ID
        parent:
          $ref: '#/components/schemas/FileEntry'
        thumbnail:
          type: string
          example: thumbnail.png
          description: Relative path to thumbnail image for the file (if it exists)
        mime:
          type: string
          example: image/png
        url:
          type: string
          example: secure/uploads/3260
          description: relative url for previewing file or folder contents
        hash:
          type: string
          example: MzI2MHxwYWRkaQ
        type:
          type: string
          enum:
            - 'image'
            - 'folder'
            - 'text'
            - 'audio'
            - 'video'
            - 'pdf'
        description:
          type: string
          example: Example description entered by user
        deleted_at:
          type: string
          example: '2021-02-23T14:42:38.000000Z'
          description: date entry was moved to trash (if it's in trash currently)
        created_at:
          type: string
          example: '2021-02-23T14:42:38.000000Z'
          description: date entry was uploaded
        updated_at:
          type: string
          example: '2021-02-23T14:42:38.000000Z'
          description: date entry was last modified (content, name or location changed)
        path:
          type: string
          example: '3260/3261/3262'
          description: full path of parent folder IDs for this entry up to root
        users:
          type: array
          items:
            type: object
            properties:
              id:
                type: integer
                format: int64
              email:
                type: string
                example: 'example@gmail.com'

    Article:
      type: object
      properties:
        id:
          type: integer
        title:
          type: string
          description: Article title
        body:
          type: string
          description: Article body
        slug:
          type: string
          description: Article slug
        draft:
          type: boolean
          description: Whether article is marked as draft
          default: false
        description:
          type: string
          description: Short description for the article
          default: false
        created_at:
          type: string
          example: '2021-07-12T01:28:52.000000Z'
          description: Date article was created
        updated_at:
          type: string
          example: '2021-07-12T01:28:52.000000Z'
          description: Date article was last updated
    CrupdateArticlePayload:
      type: object
      properties:
        title:
          type: string
          example: Article title
        body:
          type: string
          example: Article body
        slug:
          type: string
          example: article-name
          nullable: true
        description:
          type: string
          example: Short description for article
          nullable: true
        draft:
          type: boolean
          nullable: true
          default: false
        position:
          type: integer
          nullable: true
          default: 0
        categories:
          type: array
          description: Categories article should be attached to
          example: [1, 2]
          items:
            type: integer
        uploads:
          type: array
          description: Uploads that should be attached to article
          example: [ 1, 2 ]
          items:
            type: integer
        tags:
          type: array
          description: Tags that should be attached to article
          example: [ tagOne, tagTwo ]
          items:
            type: string

    HelpCenterCategory:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
          description: Category name
        description:
          type: string
          description: Short description for the category
        position:
          type: integer
          description: When displaying multiple categories, it will show at this position
        parent_id:
          type: integer
          description: Parent category
          default: false
        hidden:
          type: boolean
          default: false
        image:
          type: string
          example: https://example.com/image.png
        created_at:
          type: string
          example: '2021-07-12T01:28:52.000000Z'
          description: Date category was created
        updated_at:
          type: string
          example: '2021-07-12T01:28:52.000000Z'
          description: Date category was last updated
    CrupdateCategoryPayload:
      type: object
      properties:
        name:
          type: string
          example: category name
        description:
          type: string
          example: category description
        parent_id:
          type: integer
          nullable: true
          default: null

    User:
      type: object
      properties:
        id:
          type: integer
          format: int64
        email:
          type: string
        display_name:
          type: string
        avatar:
          type: string
        first_name:
          type: string
        last_name:
          type: string
        gender:
          type: string
        created_at:
          type: string
          example: '2021-07-12T01:28:52.000000Z'
          description: Date user was created
        updated_at:
          type: string
          example: '2021-07-12T01:28:52.000000Z'
          description: Date user was last updated
        details:
          type: object
          nullable: true
          properties:
            details:
              type: string
              example: Some details about a user
            notes:
              type: string
              example: Some notes about a user
        secondary_emails:
          type: array
          nullable: true
          items:
            type: object
            properties:
              address:
                type: string
                example: some@email.com
        tags:
          type: array
          nullable: true
          items:
            $ref: '#/components/schemas/Tag'
        purchase_codes:
          type: array
          nullable: true
          description: Only available if envato integration is enabled.
          items:
            $ref: '#/components/schemas/EnvatoPurchaseCode'

    EnvatoPurchaseCode:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 1
        code:
          type: string
          example: 98939276-b33x-4945-a542-6c79e547f128
        user_id:
          type: integer
          format: int64
          example: 1
        item_name:
          type: string
          example: some item
        item_id:
          type: string
          example: 5659559
        supported_until:
          type: string
          example: '2021-07-12T01:28:52.000000Z'
        url:
          type: string
          example: https://codecanyon.net/item/bedesk-customer-support-software-helpdesk-ticketing-system/20484131
        image:
          type: string
          example: https://s3.envato.com/files/231864410/cc-logo.jpg
        created_at:
          type: string
          example: '2021-07-12T01:28:52.000000Z'
          description: Date code was created
        updated_at:
          type: string
          example: '2021-07-12T01:28:52.000000Z'
          description: Date code was last updated
        envato_username:
          type: string
          example: some username

    Tag:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 1
        name:
          type: string
          example: favorites
        display_name:
          type: string
          example: Favorites
    CrupdateTagPayload:
      properties:
        name:
          type: string
          example: favorite
        display_name:
          type: string
          example: Favorite
        type:
          type: string
          example: category

    SearchReportItem:
      type: object
      properties:
        id:
          type: integer
          example: 15
        term:
          type: string
          example: search term
        last_seen:
          type: string
          example: '2021-07-12T01:28:52.000000Z'
        count:
          type: integer
          example: 12
        category_id:
          type: integer
          example: 1
        resulted_in_ticket:
          type: integer
          example: 5
        clicked_article:
          type: integer
          example: 15
        category:
          $ref: '#/components/schemas/Tag'

    CannedReply:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 1
        user_id:
          type: integer
          format: int64
          example: 2
        name:
          type: string
          example: reply name
        body:
          type: string
          example: reply body
        created_at:
          type: string
          example: '2021-07-12T01:28:52.000000Z'
          description: Date reply was created
        updated_at:
          type: string
          example: '2021-07-12T01:28:52.000000Z'
          description: Date reply was last updated
        shared:
          type: boolean
          example: true
        uploads:
          type: array
          items:
            $ref: '#/components/schemas/FileEntry'
    CrupdateCannedReplyPayload:
      properties:
        name:
          type: string
          example: reply name
        body:
          type: string
          example: reply body
        uploads:
          type: array
          items:
            type: integer
          example: [ 1 ]
          description: ID of attachments (uploaded files)
        shared:
          type: boolean
          example: false

    401-Response:
      description: Unauthenticated. Either access token is not provided or is invalid.
    403-Response:
      description: Unauthorized access. You don't have permissions required to perform this operation.
    404-Response:
      description: Resource not found. Could not find a resource with specified name or ID.
    422-Response:
      type: object
      properties:
        status:
          type: string
          example: error
        message:
          type: string
          example: 'Reason for the error'
        errors:
          type: object
          properties:
            some_data_1:
              type: string
              example: Error message for data 1
            some_data_2:
              type: string
              example: Error message for data 2

  securitySchemes:
    accessToken:
      type: http
      scheme: bearer
